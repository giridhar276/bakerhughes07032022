**Everything in python is object**
**Every object contains methods **

number
-------
number can be integer or decimal or octal or hexa.

val = 10
aval = 43.3


string
------
string can be defined in single or double or triple quotes.

aname = 'python programming'
bname = "java programming"
cname = """machine learning"""



list  ( array in C )
------
list contains set of elements.
Elements can set of numbers or strings or any combination.
list elements are defined in []


alist = [10,20,30,46,7]
blist = ["python","java","scala"]
clist = [43,6.34,"java"]



tuple    ( immutable or unchangable )
-------
tuple contains set of elements like the list.
Elements can set of numbers or strings or any combination.
tuple elements are defined in ().
**** Elements inside tuple cannot be modified directly*****


atup = (30,4.34,"oracle")


dictionary
-----------
dictionary contains elements in the form of keys and values.
dictionary elemnts are defined in {}.
*** Indexing is not allowed in dictionary ***

key is either number or string
value can be number or string or list or tuple or dictionary or set or any complex dictionary

syntax:     object = { key:value  , key:value , key:value ... }
example:    book   = {"chap1":10  ,"chap2":20  ,"chap3":30 }
             data  = {1:2,3:4,5:6}
           # dictionary of lists
           newbook = {"chap1":[10,"Rita","US"]  ,"chap2":[20,"Gita","UK"]  ,"chap3":[30,"Rao","Ind"] }


set
----
set is UNORDERED colletion of UNIQUE values of SAME type.

aset = {10,20,20,30,30}



mutable objects
-----------------
list
set
dictionary



immutable objects  ( unchangable or uneditable)
-------------------
string
tuple
number


functions | definitions | submodule | block

- buildin functions
- user defined functions

How to display all the list of builtin functions and exceptions ?
-----------------------------------------------------------

In the shell

dir(__builtins__)

builtin functions
------------------
print()
len()
range()
help()
dir()
input()
max()
min()
sum()
type()
isinstance()
chr()



typecasting functions ( converting from one object to another object )
--------------------------------
str()
int()
float()
oct()
hex()
list()
tuple()
dict()
set()






operators
-----------


arithmetic operators :  +   -  *  % /


assignment operators  ( ++ and -- are NOT allowed in python )
----------------------
val = 10

val+=1   or   val = val + 1
val-=1   or   val = val - 1


relational operators
----------------------
< <= > >= == !=

if len(name) > 10 :
   # logic


logical operators
--------------------
and
or
not

name = "python"
if len(name) == 6  and name.isupper():
     # if both the conditions are true then execute this

if len(name) == 6  or name.isupper():
    # if either of the expression is true ..then execute


special operators
--------------------
+ : joining operator
* : repetition operator

name = "python"
name * 4


file handling
--------------

- working with flat files  (  txt  csv conf prop  rtf log.... )


- working with third party files ( xlsx ppt pptx docx pdf zip rar .7z ... )



working with flat files
-----------------------


opening the file
-----------------
syntax:    object = open(filename,mode)
example:     fobj = open("customers.txt","r")  # read operation

             fobj = open("customers.txt","w")  # writing to the file (If file doesn't exist.. file will be created)
             case1 : If the file is not existing... file will be created firstly.
             case2 : If the file is already existing ...it overwrites the file content and starts from the first line

             fobj = open("customers.txt","a")  # append operation
             case1 : If the file is not existing... file will be created firstly.
             case2 : If the file is already existing ...it appends the file content to the end of the file




closing the file
------------------
object.close()






read operation
----------------

- using file object
- fobj.readlines()
- fobj.read()
- fobj.readline()
- using csv libary
- using pandas library




function | definition  | submodule | block
------------------------------------------
- reusability purpose
- define the block once and call it for multiple times.


ways of passing arguments
-----------------------
-fixed arguments
-default arguments
-keyword arguments
-variable length arguments



library | module | package
-----------------------------
- Every library contains set of methods
- reusability



builtin library
---------------
builtin library comes with python 
builtin library are generally(math operations , OS operations, sending mails, ftp , copy, move, string manipulations, csv , json) used by every developer.

third party library
----------------------
Depending on the requirement(N/W automations, data analtyics, image processing , cloud automation, excel automation)  developer has to install third party library from

- www.pypi.org  ( downloading manually)
- using pip tool
- using easy_install tool
- using conda tool ( only for Anaconda )


re  - regular expression   ( global concept)
--------------------------
import re

- search for patterns  ( anywhere in the string)
- match     ( at the beginning of the string)
- findall
- replace


wildcards or metacharacters   ( these metacharacters are common in all the languages )
-------------------------------

^ :  only at the beginning of the string
     if re.search("^python",line)  # display all the lines starting with python

$ :  check at the end of the string
     if re.search("python$",line)

* :  zero or more occurences of the preceding character
     if re.search("pyt*hon",line)

+ :  one or more occurences of the preceding character
     if re.search("pyt+hon",line)

. : any single character or digit or symbol
     if re.search(".ython",line)

? : either zero or one occurence of the preceding character


():  ( pattern1|pattern2)
     if re.search("(perl|python)",line)


[] :  character character
      if re.search("[pmqz9]ython",line)
      if re.search("[a-zA-Z0-9]ython",line):
      if re.search("[abcdefhABCDEFH01234]ython",line):

{} : {min,max} occurences of preceding character
     if re.search("pyt{1,4}hon",line)
     if re.search("pyt{3}hon",line)
     if re.search("pyt{5,}hon",line)

\d  : any digit
\d{3}:
\w  :  word boundary
\s  :  white spaces




# working with Oracle
















OOP principles ( are common are all the object oreinted languages)
----
-class
-object
-encapsulation
-inheritance
-polymorphism



class : Every class is blueprint of the house
        Every class contains data members and variables


object : instance of the class

self  : instance of the object







































































